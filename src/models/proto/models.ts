/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: models.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./discord";
import * as pb_1 from "google-protobuf";
export namespace Models {
    export class Characteristic extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            serialized_name?: string;
            difficulties?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serialized_name" in data && data.serialized_name != undefined) {
                    this.serialized_name = data.serialized_name;
                }
                if ("difficulties" in data && data.difficulties != undefined) {
                    this.difficulties = data.difficulties;
                }
            }
        }
        get serialized_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set serialized_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get difficulties() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set difficulties(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            serialized_name?: string;
            difficulties?: number[];
        }): Characteristic {
            const message = new Characteristic({});
            if (data.serialized_name != null) {
                message.serialized_name = data.serialized_name;
            }
            if (data.difficulties != null) {
                message.difficulties = data.difficulties;
            }
            return message;
        }
        toObject() {
            const data: {
                serialized_name?: string;
                difficulties?: number[];
            } = {};
            if (this.serialized_name != null) {
                data.serialized_name = this.serialized_name;
            }
            if (this.difficulties != null) {
                data.difficulties = this.difficulties;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serialized_name.length)
                writer.writeString(1, this.serialized_name);
            if (this.difficulties.length)
                writer.writePackedInt32(2, this.difficulties);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Characteristic {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Characteristic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.serialized_name = reader.readString();
                        break;
                    case 2:
                        var values = reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()];
                        for (var i = 0; i < values.length; i++) {
                            message.difficulties.push(values[i]);
                        }
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Characteristic {
            return Characteristic.deserialize(bytes);
        }
    }
    export class Beatmap extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            level_id?: string;
            characteristic?: Characteristic;
            difficulty?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("level_id" in data && data.level_id != undefined) {
                    this.level_id = data.level_id;
                }
                if ("characteristic" in data && data.characteristic != undefined) {
                    this.characteristic = data.characteristic;
                }
                if ("difficulty" in data && data.difficulty != undefined) {
                    this.difficulty = data.difficulty;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get level_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set level_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get characteristic() {
            return pb_1.Message.getWrapperField(this, Characteristic, 3) as Characteristic;
        }
        set characteristic(value: Characteristic) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_characteristic() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get difficulty() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set difficulty(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            level_id?: string;
            characteristic?: ReturnType<typeof Characteristic.prototype.toObject>;
            difficulty?: number;
        }): Beatmap {
            const message = new Beatmap({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.level_id != null) {
                message.level_id = data.level_id;
            }
            if (data.characteristic != null) {
                message.characteristic = Characteristic.fromObject(data.characteristic);
            }
            if (data.difficulty != null) {
                message.difficulty = data.difficulty;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                level_id?: string;
                characteristic?: ReturnType<typeof Characteristic.prototype.toObject>;
                difficulty?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.level_id != null) {
                data.level_id = this.level_id;
            }
            if (this.characteristic != null) {
                data.characteristic = this.characteristic.toObject();
            }
            if (this.difficulty != null) {
                data.difficulty = this.difficulty;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.level_id.length)
                writer.writeString(2, this.level_id);
            if (this.has_characteristic)
                writer.writeMessage(3, this.characteristic, () => this.characteristic.serialize(writer));
            if (this.difficulty != 0)
                writer.writeInt32(4, this.difficulty);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Beatmap {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Beatmap();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.level_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.characteristic, () => message.characteristic = Characteristic.deserialize(reader));
                        break;
                    case 4:
                        message.difficulty = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Beatmap {
            return Beatmap.deserialize(bytes);
        }
    }
    export class PreviewBeatmapLevel extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level_id?: string;
            name?: string;
            characteristics?: Characteristic[];
            loaded?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level_id" in data && data.level_id != undefined) {
                    this.level_id = data.level_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("characteristics" in data && data.characteristics != undefined) {
                    this.characteristics = data.characteristics;
                }
                if ("loaded" in data && data.loaded != undefined) {
                    this.loaded = data.loaded;
                }
            }
        }
        get level_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set level_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get characteristics() {
            return pb_1.Message.getRepeatedWrapperField(this, Characteristic, 3) as Characteristic[];
        }
        set characteristics(value: Characteristic[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get loaded() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set loaded(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            level_id?: string;
            name?: string;
            characteristics?: ReturnType<typeof Characteristic.prototype.toObject>[];
            loaded?: boolean;
        }): PreviewBeatmapLevel {
            const message = new PreviewBeatmapLevel({});
            if (data.level_id != null) {
                message.level_id = data.level_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.characteristics != null) {
                message.characteristics = data.characteristics.map(item => Characteristic.fromObject(item));
            }
            if (data.loaded != null) {
                message.loaded = data.loaded;
            }
            return message;
        }
        toObject() {
            const data: {
                level_id?: string;
                name?: string;
                characteristics?: ReturnType<typeof Characteristic.prototype.toObject>[];
                loaded?: boolean;
            } = {};
            if (this.level_id != null) {
                data.level_id = this.level_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.characteristics != null) {
                data.characteristics = this.characteristics.map((item: Characteristic) => item.toObject());
            }
            if (this.loaded != null) {
                data.loaded = this.loaded;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level_id.length)
                writer.writeString(1, this.level_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.characteristics.length)
                writer.writeRepeatedMessage(3, this.characteristics, (item: Characteristic) => item.serialize(writer));
            if (this.loaded != false)
                writer.writeBool(4, this.loaded);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreviewBeatmapLevel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreviewBeatmapLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level_id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.characteristics, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Characteristic.deserialize(reader), Characteristic));
                        break;
                    case 4:
                        message.loaded = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreviewBeatmapLevel {
            return PreviewBeatmapLevel.deserialize(bytes);
        }
    }
    export class GameplayModifiers extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            options?: GameplayModifiers.GameOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
        }
        get options() {
            return pb_1.Message.getFieldWithDefault(this, 1, GameplayModifiers.GameOptions.None) as GameplayModifiers.GameOptions;
        }
        set options(value: GameplayModifiers.GameOptions) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            options?: GameplayModifiers.GameOptions;
        }): GameplayModifiers {
            const message = new GameplayModifiers({});
            if (data.options != null) {
                message.options = data.options;
            }
            return message;
        }
        toObject() {
            const data: {
                options?: GameplayModifiers.GameOptions;
            } = {};
            if (this.options != null) {
                data.options = this.options;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.options != GameplayModifiers.GameOptions.None)
                writer.writeEnum(1, this.options);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameplayModifiers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameplayModifiers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.options = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameplayModifiers {
            return GameplayModifiers.deserialize(bytes);
        }
    }
    export namespace GameplayModifiers {
        export enum GameOptions {
            None = 0,
            NoFail = 1,
            NoBombs = 2,
            NoArrows = 4,
            NoObstacles = 8,
            SlowSong = 16,
            InstaFail = 32,
            FailOnClash = 64,
            BatteryEnergy = 128,
            FastNotes = 256,
            FastSong = 512,
            DisappearingArrows = 1024,
            GhostNotes = 2048,
            DemoNoFail = 4096,
            DemoNoObstacles = 8192,
            StrictAngles = 16384,
            ProMode = 32768,
            ZenMode = 65536,
            SmallCubes = 131072,
            SuperFastSong = 262144
        }
    }
    export class PlayerSpecificSettings extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_height?: number;
            sfx_volume?: number;
            saber_trail_intensity?: number;
            note_jump_start_beat_offset?: number;
            note_jump_fixed_duration?: number;
            options?: PlayerSpecificSettings.PlayerOptions;
            note_jump_duration_type_settings?: PlayerSpecificSettings.NoteJumpDurationTypeSettings;
            arc_visibility_type?: PlayerSpecificSettings.ArcVisibilityType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_height" in data && data.player_height != undefined) {
                    this.player_height = data.player_height;
                }
                if ("sfx_volume" in data && data.sfx_volume != undefined) {
                    this.sfx_volume = data.sfx_volume;
                }
                if ("saber_trail_intensity" in data && data.saber_trail_intensity != undefined) {
                    this.saber_trail_intensity = data.saber_trail_intensity;
                }
                if ("note_jump_start_beat_offset" in data && data.note_jump_start_beat_offset != undefined) {
                    this.note_jump_start_beat_offset = data.note_jump_start_beat_offset;
                }
                if ("note_jump_fixed_duration" in data && data.note_jump_fixed_duration != undefined) {
                    this.note_jump_fixed_duration = data.note_jump_fixed_duration;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("note_jump_duration_type_settings" in data && data.note_jump_duration_type_settings != undefined) {
                    this.note_jump_duration_type_settings = data.note_jump_duration_type_settings;
                }
                if ("arc_visibility_type" in data && data.arc_visibility_type != undefined) {
                    this.arc_visibility_type = data.arc_visibility_type;
                }
            }
        }
        get player_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sfx_volume() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sfx_volume(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get saber_trail_intensity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set saber_trail_intensity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get note_jump_start_beat_offset() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set note_jump_start_beat_offset(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get note_jump_fixed_duration() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set note_jump_fixed_duration(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get options() {
            return pb_1.Message.getFieldWithDefault(this, 6, PlayerSpecificSettings.PlayerOptions.NoPlayerOptions) as PlayerSpecificSettings.PlayerOptions;
        }
        set options(value: PlayerSpecificSettings.PlayerOptions) {
            pb_1.Message.setField(this, 6, value);
        }
        get note_jump_duration_type_settings() {
            return pb_1.Message.getFieldWithDefault(this, 7, PlayerSpecificSettings.NoteJumpDurationTypeSettings.Dynamic) as PlayerSpecificSettings.NoteJumpDurationTypeSettings;
        }
        set note_jump_duration_type_settings(value: PlayerSpecificSettings.NoteJumpDurationTypeSettings) {
            pb_1.Message.setField(this, 7, value);
        }
        get arc_visibility_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, PlayerSpecificSettings.ArcVisibilityType.None) as PlayerSpecificSettings.ArcVisibilityType;
        }
        set arc_visibility_type(value: PlayerSpecificSettings.ArcVisibilityType) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            player_height?: number;
            sfx_volume?: number;
            saber_trail_intensity?: number;
            note_jump_start_beat_offset?: number;
            note_jump_fixed_duration?: number;
            options?: PlayerSpecificSettings.PlayerOptions;
            note_jump_duration_type_settings?: PlayerSpecificSettings.NoteJumpDurationTypeSettings;
            arc_visibility_type?: PlayerSpecificSettings.ArcVisibilityType;
        }): PlayerSpecificSettings {
            const message = new PlayerSpecificSettings({});
            if (data.player_height != null) {
                message.player_height = data.player_height;
            }
            if (data.sfx_volume != null) {
                message.sfx_volume = data.sfx_volume;
            }
            if (data.saber_trail_intensity != null) {
                message.saber_trail_intensity = data.saber_trail_intensity;
            }
            if (data.note_jump_start_beat_offset != null) {
                message.note_jump_start_beat_offset = data.note_jump_start_beat_offset;
            }
            if (data.note_jump_fixed_duration != null) {
                message.note_jump_fixed_duration = data.note_jump_fixed_duration;
            }
            if (data.options != null) {
                message.options = data.options;
            }
            if (data.note_jump_duration_type_settings != null) {
                message.note_jump_duration_type_settings = data.note_jump_duration_type_settings;
            }
            if (data.arc_visibility_type != null) {
                message.arc_visibility_type = data.arc_visibility_type;
            }
            return message;
        }
        toObject() {
            const data: {
                player_height?: number;
                sfx_volume?: number;
                saber_trail_intensity?: number;
                note_jump_start_beat_offset?: number;
                note_jump_fixed_duration?: number;
                options?: PlayerSpecificSettings.PlayerOptions;
                note_jump_duration_type_settings?: PlayerSpecificSettings.NoteJumpDurationTypeSettings;
                arc_visibility_type?: PlayerSpecificSettings.ArcVisibilityType;
            } = {};
            if (this.player_height != null) {
                data.player_height = this.player_height;
            }
            if (this.sfx_volume != null) {
                data.sfx_volume = this.sfx_volume;
            }
            if (this.saber_trail_intensity != null) {
                data.saber_trail_intensity = this.saber_trail_intensity;
            }
            if (this.note_jump_start_beat_offset != null) {
                data.note_jump_start_beat_offset = this.note_jump_start_beat_offset;
            }
            if (this.note_jump_fixed_duration != null) {
                data.note_jump_fixed_duration = this.note_jump_fixed_duration;
            }
            if (this.options != null) {
                data.options = this.options;
            }
            if (this.note_jump_duration_type_settings != null) {
                data.note_jump_duration_type_settings = this.note_jump_duration_type_settings;
            }
            if (this.arc_visibility_type != null) {
                data.arc_visibility_type = this.arc_visibility_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_height != 0)
                writer.writeFloat(1, this.player_height);
            if (this.sfx_volume != 0)
                writer.writeFloat(2, this.sfx_volume);
            if (this.saber_trail_intensity != 0)
                writer.writeFloat(3, this.saber_trail_intensity);
            if (this.note_jump_start_beat_offset != 0)
                writer.writeFloat(4, this.note_jump_start_beat_offset);
            if (this.note_jump_fixed_duration != 0)
                writer.writeFloat(5, this.note_jump_fixed_duration);
            if (this.options != PlayerSpecificSettings.PlayerOptions.NoPlayerOptions)
                writer.writeEnum(6, this.options);
            if (this.note_jump_duration_type_settings != PlayerSpecificSettings.NoteJumpDurationTypeSettings.Dynamic)
                writer.writeEnum(7, this.note_jump_duration_type_settings);
            if (this.arc_visibility_type != PlayerSpecificSettings.ArcVisibilityType.None)
                writer.writeEnum(8, this.arc_visibility_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerSpecificSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerSpecificSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_height = reader.readFloat();
                        break;
                    case 2:
                        message.sfx_volume = reader.readFloat();
                        break;
                    case 3:
                        message.saber_trail_intensity = reader.readFloat();
                        break;
                    case 4:
                        message.note_jump_start_beat_offset = reader.readFloat();
                        break;
                    case 5:
                        message.note_jump_fixed_duration = reader.readFloat();
                        break;
                    case 6:
                        message.options = reader.readEnum();
                        break;
                    case 7:
                        message.note_jump_duration_type_settings = reader.readEnum();
                        break;
                    case 8:
                        message.arc_visibility_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerSpecificSettings {
            return PlayerSpecificSettings.deserialize(bytes);
        }
    }
    export namespace PlayerSpecificSettings {
        export enum PlayerOptions {
            NoPlayerOptions = 0,
            LeftHanded = 1,
            StaticLights = 2,
            NoHud = 4,
            AdvancedHud = 8,
            ReduceDebris = 16,
            AutoPlayerHeight = 32,
            NoFailEffects = 64,
            AutoRestart = 128,
            HideNoteSpawnEffect = 256,
            AdaptiveSfx = 512,
            ArcsHapticFeedback = 1024
        }
        export enum NoteJumpDurationTypeSettings {
            Dynamic = 0,
            Static = 1
        }
        export enum ArcVisibilityType {
            None = 0,
            Low = 1,
            Standard = 2,
            High = 3
        }
    }
    export class GameplayParameters extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            beatmap?: Beatmap;
            player_settings?: PlayerSpecificSettings;
            gameplay_modifiers?: GameplayModifiers;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("beatmap" in data && data.beatmap != undefined) {
                    this.beatmap = data.beatmap;
                }
                if ("player_settings" in data && data.player_settings != undefined) {
                    this.player_settings = data.player_settings;
                }
                if ("gameplay_modifiers" in data && data.gameplay_modifiers != undefined) {
                    this.gameplay_modifiers = data.gameplay_modifiers;
                }
            }
        }
        get beatmap() {
            return pb_1.Message.getWrapperField(this, Beatmap, 1) as Beatmap;
        }
        set beatmap(value: Beatmap) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_beatmap() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get player_settings() {
            return pb_1.Message.getWrapperField(this, PlayerSpecificSettings, 2) as PlayerSpecificSettings;
        }
        set player_settings(value: PlayerSpecificSettings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_player_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get gameplay_modifiers() {
            return pb_1.Message.getWrapperField(this, GameplayModifiers, 3) as GameplayModifiers;
        }
        set gameplay_modifiers(value: GameplayModifiers) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_gameplay_modifiers() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            beatmap?: ReturnType<typeof Beatmap.prototype.toObject>;
            player_settings?: ReturnType<typeof PlayerSpecificSettings.prototype.toObject>;
            gameplay_modifiers?: ReturnType<typeof GameplayModifiers.prototype.toObject>;
        }): GameplayParameters {
            const message = new GameplayParameters({});
            if (data.beatmap != null) {
                message.beatmap = Beatmap.fromObject(data.beatmap);
            }
            if (data.player_settings != null) {
                message.player_settings = PlayerSpecificSettings.fromObject(data.player_settings);
            }
            if (data.gameplay_modifiers != null) {
                message.gameplay_modifiers = GameplayModifiers.fromObject(data.gameplay_modifiers);
            }
            return message;
        }
        toObject() {
            const data: {
                beatmap?: ReturnType<typeof Beatmap.prototype.toObject>;
                player_settings?: ReturnType<typeof PlayerSpecificSettings.prototype.toObject>;
                gameplay_modifiers?: ReturnType<typeof GameplayModifiers.prototype.toObject>;
            } = {};
            if (this.beatmap != null) {
                data.beatmap = this.beatmap.toObject();
            }
            if (this.player_settings != null) {
                data.player_settings = this.player_settings.toObject();
            }
            if (this.gameplay_modifiers != null) {
                data.gameplay_modifiers = this.gameplay_modifiers.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_beatmap)
                writer.writeMessage(1, this.beatmap, () => this.beatmap.serialize(writer));
            if (this.has_player_settings)
                writer.writeMessage(2, this.player_settings, () => this.player_settings.serialize(writer));
            if (this.has_gameplay_modifiers)
                writer.writeMessage(3, this.gameplay_modifiers, () => this.gameplay_modifiers.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameplayParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameplayParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.beatmap, () => message.beatmap = Beatmap.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.player_settings, () => message.player_settings = PlayerSpecificSettings.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.gameplay_modifiers, () => message.gameplay_modifiers = GameplayModifiers.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameplayParameters {
            return GameplayParameters.deserialize(bytes);
        }
    }
    export class Team extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
        }): Team {
            const message = new Team({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Team {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Team();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Team {
            return Team.deserialize(bytes);
        }
    }
    export class ServerSettings extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server_name?: string;
            password?: string;
            enable_teams?: boolean;
            teams?: Team[];
            score_update_frequency?: number;
            banned_mods?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server_name" in data && data.server_name != undefined) {
                    this.server_name = data.server_name;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("enable_teams" in data && data.enable_teams != undefined) {
                    this.enable_teams = data.enable_teams;
                }
                if ("teams" in data && data.teams != undefined) {
                    this.teams = data.teams;
                }
                if ("score_update_frequency" in data && data.score_update_frequency != undefined) {
                    this.score_update_frequency = data.score_update_frequency;
                }
                if ("banned_mods" in data && data.banned_mods != undefined) {
                    this.banned_mods = data.banned_mods;
                }
            }
        }
        get server_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set server_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get enable_teams() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set enable_teams(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get teams() {
            return pb_1.Message.getRepeatedWrapperField(this, Team, 4) as Team[];
        }
        set teams(value: Team[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get score_update_frequency() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set score_update_frequency(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get banned_mods() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set banned_mods(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            server_name?: string;
            password?: string;
            enable_teams?: boolean;
            teams?: ReturnType<typeof Team.prototype.toObject>[];
            score_update_frequency?: number;
            banned_mods?: string[];
        }): ServerSettings {
            const message = new ServerSettings({});
            if (data.server_name != null) {
                message.server_name = data.server_name;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.enable_teams != null) {
                message.enable_teams = data.enable_teams;
            }
            if (data.teams != null) {
                message.teams = data.teams.map(item => Team.fromObject(item));
            }
            if (data.score_update_frequency != null) {
                message.score_update_frequency = data.score_update_frequency;
            }
            if (data.banned_mods != null) {
                message.banned_mods = data.banned_mods;
            }
            return message;
        }
        toObject() {
            const data: {
                server_name?: string;
                password?: string;
                enable_teams?: boolean;
                teams?: ReturnType<typeof Team.prototype.toObject>[];
                score_update_frequency?: number;
                banned_mods?: string[];
            } = {};
            if (this.server_name != null) {
                data.server_name = this.server_name;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.enable_teams != null) {
                data.enable_teams = this.enable_teams;
            }
            if (this.teams != null) {
                data.teams = this.teams.map((item: Team) => item.toObject());
            }
            if (this.score_update_frequency != null) {
                data.score_update_frequency = this.score_update_frequency;
            }
            if (this.banned_mods != null) {
                data.banned_mods = this.banned_mods;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.server_name.length)
                writer.writeString(1, this.server_name);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.enable_teams != false)
                writer.writeBool(3, this.enable_teams);
            if (this.teams.length)
                writer.writeRepeatedMessage(4, this.teams, (item: Team) => item.serialize(writer));
            if (this.score_update_frequency != 0)
                writer.writeInt32(5, this.score_update_frequency);
            if (this.banned_mods.length)
                writer.writeRepeatedString(6, this.banned_mods);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.server_name = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.enable_teams = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.teams, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Team.deserialize(reader), Team));
                        break;
                    case 5:
                        message.score_update_frequency = reader.readInt32();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerSettings {
            return ServerSettings.deserialize(bytes);
        }
    }
    export class SongList extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            levels?: PreviewBeatmapLevel[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("levels" in data && data.levels != undefined) {
                    this.levels = data.levels;
                }
            }
        }
        get levels() {
            return pb_1.Message.getRepeatedWrapperField(this, PreviewBeatmapLevel, 1) as PreviewBeatmapLevel[];
        }
        set levels(value: PreviewBeatmapLevel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            levels?: ReturnType<typeof PreviewBeatmapLevel.prototype.toObject>[];
        }): SongList {
            const message = new SongList({});
            if (data.levels != null) {
                message.levels = data.levels.map(item => PreviewBeatmapLevel.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                levels?: ReturnType<typeof PreviewBeatmapLevel.prototype.toObject>[];
            } = {};
            if (this.levels != null) {
                data.levels = this.levels.map((item: PreviewBeatmapLevel) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.levels.length)
                writer.writeRepeatedMessage(1, this.levels, (item: PreviewBeatmapLevel) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SongList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SongList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.levels, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PreviewBeatmapLevel.deserialize(reader), PreviewBeatmapLevel));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SongList {
            return SongList.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            guid?: string;
            name?: string;
            user_id?: string;
            client_type?: User.ClientTypes;
            team?: Team;
            play_state?: User.PlayStates;
            download_state?: User.DownloadStates;
            mod_list?: string[];
            stream_screen_coordinates?: User.Point;
            stream_delay_ms?: number;
            stream_sync_start_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("guid" in data && data.guid != undefined) {
                    this.guid = data.guid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("client_type" in data && data.client_type != undefined) {
                    this.client_type = data.client_type;
                }
                if ("team" in data && data.team != undefined) {
                    this.team = data.team;
                }
                if ("play_state" in data && data.play_state != undefined) {
                    this.play_state = data.play_state;
                }
                if ("download_state" in data && data.download_state != undefined) {
                    this.download_state = data.download_state;
                }
                if ("mod_list" in data && data.mod_list != undefined) {
                    this.mod_list = data.mod_list;
                }
                if ("stream_screen_coordinates" in data && data.stream_screen_coordinates != undefined) {
                    this.stream_screen_coordinates = data.stream_screen_coordinates;
                }
                if ("stream_delay_ms" in data && data.stream_delay_ms != undefined) {
                    this.stream_delay_ms = data.stream_delay_ms;
                }
                if ("stream_sync_start_ms" in data && data.stream_sync_start_ms != undefined) {
                    this.stream_sync_start_ms = data.stream_sync_start_ms;
                }
            }
        }
        get guid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set guid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get client_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, User.ClientTypes.Player) as User.ClientTypes;
        }
        set client_type(value: User.ClientTypes) {
            pb_1.Message.setField(this, 4, value);
        }
        get team() {
            return pb_1.Message.getWrapperField(this, Team, 5) as Team;
        }
        set team(value: Team) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_team() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get play_state() {
            return pb_1.Message.getFieldWithDefault(this, 6, User.PlayStates.Waiting) as User.PlayStates;
        }
        set play_state(value: User.PlayStates) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_state() {
            return pb_1.Message.getFieldWithDefault(this, 7, User.DownloadStates.None) as User.DownloadStates;
        }
        set download_state(value: User.DownloadStates) {
            pb_1.Message.setField(this, 7, value);
        }
        get mod_list() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set mod_list(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get stream_screen_coordinates() {
            return pb_1.Message.getWrapperField(this, User.Point, 9) as User.Point;
        }
        set stream_screen_coordinates(value: User.Point) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_stream_screen_coordinates() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get stream_delay_ms() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set stream_delay_ms(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get stream_sync_start_ms() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set stream_sync_start_ms(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            guid?: string;
            name?: string;
            user_id?: string;
            client_type?: User.ClientTypes;
            team?: ReturnType<typeof Team.prototype.toObject>;
            play_state?: User.PlayStates;
            download_state?: User.DownloadStates;
            mod_list?: string[];
            stream_screen_coordinates?: ReturnType<typeof User.Point.prototype.toObject>;
            stream_delay_ms?: number;
            stream_sync_start_ms?: number;
        }): User {
            const message = new User({});
            if (data.guid != null) {
                message.guid = data.guid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.client_type != null) {
                message.client_type = data.client_type;
            }
            if (data.team != null) {
                message.team = Team.fromObject(data.team);
            }
            if (data.play_state != null) {
                message.play_state = data.play_state;
            }
            if (data.download_state != null) {
                message.download_state = data.download_state;
            }
            if (data.mod_list != null) {
                message.mod_list = data.mod_list;
            }
            if (data.stream_screen_coordinates != null) {
                message.stream_screen_coordinates = User.Point.fromObject(data.stream_screen_coordinates);
            }
            if (data.stream_delay_ms != null) {
                message.stream_delay_ms = data.stream_delay_ms;
            }
            if (data.stream_sync_start_ms != null) {
                message.stream_sync_start_ms = data.stream_sync_start_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                guid?: string;
                name?: string;
                user_id?: string;
                client_type?: User.ClientTypes;
                team?: ReturnType<typeof Team.prototype.toObject>;
                play_state?: User.PlayStates;
                download_state?: User.DownloadStates;
                mod_list?: string[];
                stream_screen_coordinates?: ReturnType<typeof User.Point.prototype.toObject>;
                stream_delay_ms?: number;
                stream_sync_start_ms?: number;
            } = {};
            if (this.guid != null) {
                data.guid = this.guid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.client_type != null) {
                data.client_type = this.client_type;
            }
            if (this.team != null) {
                data.team = this.team.toObject();
            }
            if (this.play_state != null) {
                data.play_state = this.play_state;
            }
            if (this.download_state != null) {
                data.download_state = this.download_state;
            }
            if (this.mod_list != null) {
                data.mod_list = this.mod_list;
            }
            if (this.stream_screen_coordinates != null) {
                data.stream_screen_coordinates = this.stream_screen_coordinates.toObject();
            }
            if (this.stream_delay_ms != null) {
                data.stream_delay_ms = this.stream_delay_ms;
            }
            if (this.stream_sync_start_ms != null) {
                data.stream_sync_start_ms = this.stream_sync_start_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guid.length)
                writer.writeString(1, this.guid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.user_id.length)
                writer.writeString(3, this.user_id);
            if (this.client_type != User.ClientTypes.Player)
                writer.writeEnum(4, this.client_type);
            if (this.has_team)
                writer.writeMessage(5, this.team, () => this.team.serialize(writer));
            if (this.play_state != User.PlayStates.Waiting)
                writer.writeEnum(6, this.play_state);
            if (this.download_state != User.DownloadStates.None)
                writer.writeEnum(7, this.download_state);
            if (this.mod_list.length)
                writer.writeRepeatedString(8, this.mod_list);
            if (this.has_stream_screen_coordinates)
                writer.writeMessage(9, this.stream_screen_coordinates, () => this.stream_screen_coordinates.serialize(writer));
            if (this.stream_delay_ms != 0)
                writer.writeInt64(10, this.stream_delay_ms);
            if (this.stream_sync_start_ms != 0)
                writer.writeInt64(11, this.stream_sync_start_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.user_id = reader.readString();
                        break;
                    case 4:
                        message.client_type = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.team, () => message.team = Team.deserialize(reader));
                        break;
                    case 6:
                        message.play_state = reader.readEnum();
                        break;
                    case 7:
                        message.download_state = reader.readEnum();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message.stream_screen_coordinates, () => message.stream_screen_coordinates = User.Point.deserialize(reader));
                        break;
                    case 10:
                        message.stream_delay_ms = reader.readInt64();
                        break;
                    case 11:
                        message.stream_sync_start_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export namespace User {
        export enum PlayStates {
            Waiting = 0,
            InGame = 1
        }
        export enum DownloadStates {
            None = 0,
            Downloading = 1,
            Downloaded = 2,
            DownloadError = 3
        }
        export enum ClientTypes {
            Player = 0,
            Coordinator = 1,
            TemporaryConnection = 2,
            WebsocketConnection = 3
        }
        export class Point extends pb_1.Message {
            private one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                x?: number;
                y?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("x" in data && data.x != undefined) {
                        this.x = data.x;
                    }
                    if ("y" in data && data.y != undefined) {
                        this.y = data.y;
                    }
                }
            }
            get x() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set x(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get y() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set y(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                x?: number;
                y?: number;
            }): Point {
                const message = new Point({});
                if (data.x != null) {
                    message.x = data.x;
                }
                if (data.y != null) {
                    message.y = data.y;
                }
                return message;
            }
            toObject() {
                const data: {
                    x?: number;
                    y?: number;
                } = {};
                if (this.x != null) {
                    data.x = this.x;
                }
                if (this.y != null) {
                    data.y = this.y;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.x != 0)
                    writer.writeInt32(1, this.x);
                if (this.y != 0)
                    writer.writeInt32(2, this.y);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Point {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Point();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.x = reader.readInt32();
                            break;
                        case 2:
                            message.y = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Point {
                return Point.deserialize(bytes);
            }
        }
    }
    export class Match extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            guid?: string;
            associated_users?: string[];
            leader?: string;
            selected_level?: PreviewBeatmapLevel;
            selected_characteristic?: Characteristic;
            selected_difficulty?: number;
            start_time?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("guid" in data && data.guid != undefined) {
                    this.guid = data.guid;
                }
                if ("associated_users" in data && data.associated_users != undefined) {
                    this.associated_users = data.associated_users;
                }
                if ("leader" in data && data.leader != undefined) {
                    this.leader = data.leader;
                }
                if ("selected_level" in data && data.selected_level != undefined) {
                    this.selected_level = data.selected_level;
                }
                if ("selected_characteristic" in data && data.selected_characteristic != undefined) {
                    this.selected_characteristic = data.selected_characteristic;
                }
                if ("selected_difficulty" in data && data.selected_difficulty != undefined) {
                    this.selected_difficulty = data.selected_difficulty;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
            }
        }
        get guid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set guid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get associated_users() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set associated_users(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get leader() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set leader(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get selected_level() {
            return pb_1.Message.getWrapperField(this, PreviewBeatmapLevel, 5) as PreviewBeatmapLevel;
        }
        set selected_level(value: PreviewBeatmapLevel) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_selected_level() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get selected_characteristic() {
            return pb_1.Message.getWrapperField(this, Characteristic, 6) as Characteristic;
        }
        set selected_characteristic(value: Characteristic) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_selected_characteristic() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get selected_difficulty() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set selected_difficulty(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set start_time(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            guid?: string;
            associated_users?: string[];
            leader?: string;
            selected_level?: ReturnType<typeof PreviewBeatmapLevel.prototype.toObject>;
            selected_characteristic?: ReturnType<typeof Characteristic.prototype.toObject>;
            selected_difficulty?: number;
            start_time?: string;
        }): Match {
            const message = new Match({});
            if (data.guid != null) {
                message.guid = data.guid;
            }
            if (data.associated_users != null) {
                message.associated_users = data.associated_users;
            }
            if (data.leader != null) {
                message.leader = data.leader;
            }
            if (data.selected_level != null) {
                message.selected_level = PreviewBeatmapLevel.fromObject(data.selected_level);
            }
            if (data.selected_characteristic != null) {
                message.selected_characteristic = Characteristic.fromObject(data.selected_characteristic);
            }
            if (data.selected_difficulty != null) {
                message.selected_difficulty = data.selected_difficulty;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            return message;
        }
        toObject() {
            const data: {
                guid?: string;
                associated_users?: string[];
                leader?: string;
                selected_level?: ReturnType<typeof PreviewBeatmapLevel.prototype.toObject>;
                selected_characteristic?: ReturnType<typeof Characteristic.prototype.toObject>;
                selected_difficulty?: number;
                start_time?: string;
            } = {};
            if (this.guid != null) {
                data.guid = this.guid;
            }
            if (this.associated_users != null) {
                data.associated_users = this.associated_users;
            }
            if (this.leader != null) {
                data.leader = this.leader;
            }
            if (this.selected_level != null) {
                data.selected_level = this.selected_level.toObject();
            }
            if (this.selected_characteristic != null) {
                data.selected_characteristic = this.selected_characteristic.toObject();
            }
            if (this.selected_difficulty != null) {
                data.selected_difficulty = this.selected_difficulty;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guid.length)
                writer.writeString(1, this.guid);
            if (this.associated_users.length)
                writer.writeRepeatedString(2, this.associated_users);
            if (this.leader.length)
                writer.writeString(3, this.leader);
            if (this.has_selected_level)
                writer.writeMessage(5, this.selected_level, () => this.selected_level.serialize(writer));
            if (this.has_selected_characteristic)
                writer.writeMessage(6, this.selected_characteristic, () => this.selected_characteristic.serialize(writer));
            if (this.selected_difficulty != 0)
                writer.writeInt32(7, this.selected_difficulty);
            if (this.start_time.length)
                writer.writeString(8, this.start_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Match {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Match();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guid = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.leader = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.selected_level, () => message.selected_level = PreviewBeatmapLevel.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.selected_characteristic, () => message.selected_characteristic = Characteristic.deserialize(reader));
                        break;
                    case 7:
                        message.selected_difficulty = reader.readInt32();
                        break;
                    case 8:
                        message.start_time = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Match {
            return Match.deserialize(bytes);
        }
    }
    export class QualifierEvent extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            guid?: string;
            name?: string;
            guild?: dependency_1.proto.discord.Guild;
            info_channel?: dependency_1.proto.discord.Channel;
            qualifier_maps?: GameplayParameters[];
            send_scores_to_info_channel?: boolean;
            flags?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("guid" in data && data.guid != undefined) {
                    this.guid = data.guid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("guild" in data && data.guild != undefined) {
                    this.guild = data.guild;
                }
                if ("info_channel" in data && data.info_channel != undefined) {
                    this.info_channel = data.info_channel;
                }
                if ("qualifier_maps" in data && data.qualifier_maps != undefined) {
                    this.qualifier_maps = data.qualifier_maps;
                }
                if ("send_scores_to_info_channel" in data && data.send_scores_to_info_channel != undefined) {
                    this.send_scores_to_info_channel = data.send_scores_to_info_channel;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get guid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set guid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get guild() {
            return pb_1.Message.getWrapperField(this, dependency_1.proto.discord.Guild, 3) as dependency_1.proto.discord.Guild;
        }
        set guild(value: dependency_1.proto.discord.Guild) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_guild() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get info_channel() {
            return pb_1.Message.getWrapperField(this, dependency_1.proto.discord.Channel, 4) as dependency_1.proto.discord.Channel;
        }
        set info_channel(value: dependency_1.proto.discord.Channel) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_info_channel() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get qualifier_maps() {
            return pb_1.Message.getRepeatedWrapperField(this, GameplayParameters, 5) as GameplayParameters[];
        }
        set qualifier_maps(value: GameplayParameters[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get send_scores_to_info_channel() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set send_scores_to_info_channel(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set flags(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            guid?: string;
            name?: string;
            guild?: ReturnType<typeof dependency_1.proto.discord.Guild.prototype.toObject>;
            info_channel?: ReturnType<typeof dependency_1.proto.discord.Channel.prototype.toObject>;
            qualifier_maps?: ReturnType<typeof GameplayParameters.prototype.toObject>[];
            send_scores_to_info_channel?: boolean;
            flags?: number;
        }): QualifierEvent {
            const message = new QualifierEvent({});
            if (data.guid != null) {
                message.guid = data.guid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.guild != null) {
                message.guild = dependency_1.proto.discord.Guild.fromObject(data.guild);
            }
            if (data.info_channel != null) {
                message.info_channel = dependency_1.proto.discord.Channel.fromObject(data.info_channel);
            }
            if (data.qualifier_maps != null) {
                message.qualifier_maps = data.qualifier_maps.map(item => GameplayParameters.fromObject(item));
            }
            if (data.send_scores_to_info_channel != null) {
                message.send_scores_to_info_channel = data.send_scores_to_info_channel;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                guid?: string;
                name?: string;
                guild?: ReturnType<typeof dependency_1.proto.discord.Guild.prototype.toObject>;
                info_channel?: ReturnType<typeof dependency_1.proto.discord.Channel.prototype.toObject>;
                qualifier_maps?: ReturnType<typeof GameplayParameters.prototype.toObject>[];
                send_scores_to_info_channel?: boolean;
                flags?: number;
            } = {};
            if (this.guid != null) {
                data.guid = this.guid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.guild != null) {
                data.guild = this.guild.toObject();
            }
            if (this.info_channel != null) {
                data.info_channel = this.info_channel.toObject();
            }
            if (this.qualifier_maps != null) {
                data.qualifier_maps = this.qualifier_maps.map((item: GameplayParameters) => item.toObject());
            }
            if (this.send_scores_to_info_channel != null) {
                data.send_scores_to_info_channel = this.send_scores_to_info_channel;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guid.length)
                writer.writeString(1, this.guid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_guild)
                writer.writeMessage(3, this.guild, () => this.guild.serialize(writer));
            if (this.has_info_channel)
                writer.writeMessage(4, this.info_channel, () => this.info_channel.serialize(writer));
            if (this.qualifier_maps.length)
                writer.writeRepeatedMessage(5, this.qualifier_maps, (item: GameplayParameters) => item.serialize(writer));
            if (this.send_scores_to_info_channel != false)
                writer.writeBool(6, this.send_scores_to_info_channel);
            if (this.flags != 0)
                writer.writeInt32(7, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualifierEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualifierEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.guild, () => message.guild = dependency_1.proto.discord.Guild.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.info_channel, () => message.info_channel = dependency_1.proto.discord.Channel.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.qualifier_maps, () => pb_1.Message.addToRepeatedWrapperField(message, 5, GameplayParameters.deserialize(reader), GameplayParameters));
                        break;
                    case 6:
                        message.send_scores_to_info_channel = reader.readBool();
                        break;
                    case 7:
                        message.flags = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QualifierEvent {
            return QualifierEvent.deserialize(bytes);
        }
    }
    export namespace QualifierEvent {
        export enum EventSettings {
            None = 0,
            HideScoresFromPlayers = 1,
            DisableScoresaberSubmission = 2,
            EnableLeaderboardMessage = 4
        }
    }
    export class CoreServer extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            address?: string;
            port?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            address?: string;
            port?: number;
        }): CoreServer {
            const message = new CoreServer({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                address?: string;
                port?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (this.port != 0)
                writer.writeInt32(3, this.port);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoreServer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoreServer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    case 3:
                        message.port = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoreServer {
            return CoreServer.deserialize(bytes);
        }
    }
    export class State extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            server_settings?: ServerSettings;
            users?: User[];
            matches?: Match[];
            events?: QualifierEvent[];
            known_hosts?: CoreServer[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4, 5, 6], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("server_settings" in data && data.server_settings != undefined) {
                    this.server_settings = data.server_settings;
                }
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("matches" in data && data.matches != undefined) {
                    this.matches = data.matches;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("known_hosts" in data && data.known_hosts != undefined) {
                    this.known_hosts = data.known_hosts;
                }
            }
        }
        get server_settings() {
            return pb_1.Message.getWrapperField(this, ServerSettings, 1) as ServerSettings;
        }
        set server_settings(value: ServerSettings) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_server_settings() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 2) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get matches() {
            return pb_1.Message.getRepeatedWrapperField(this, Match, 4) as Match[];
        }
        set matches(value: Match[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, QualifierEvent, 5) as QualifierEvent[];
        }
        set events(value: QualifierEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get known_hosts() {
            return pb_1.Message.getRepeatedWrapperField(this, CoreServer, 6) as CoreServer[];
        }
        set known_hosts(value: CoreServer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            server_settings?: ReturnType<typeof ServerSettings.prototype.toObject>;
            users?: ReturnType<typeof User.prototype.toObject>[];
            matches?: ReturnType<typeof Match.prototype.toObject>[];
            events?: ReturnType<typeof QualifierEvent.prototype.toObject>[];
            known_hosts?: ReturnType<typeof CoreServer.prototype.toObject>[];
        }): State {
            const message = new State({});
            if (data.server_settings != null) {
                message.server_settings = ServerSettings.fromObject(data.server_settings);
            }
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            if (data.matches != null) {
                message.matches = data.matches.map(item => Match.fromObject(item));
            }
            if (data.events != null) {
                message.events = data.events.map(item => QualifierEvent.fromObject(item));
            }
            if (data.known_hosts != null) {
                message.known_hosts = data.known_hosts.map(item => CoreServer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                server_settings?: ReturnType<typeof ServerSettings.prototype.toObject>;
                users?: ReturnType<typeof User.prototype.toObject>[];
                matches?: ReturnType<typeof Match.prototype.toObject>[];
                events?: ReturnType<typeof QualifierEvent.prototype.toObject>[];
                known_hosts?: ReturnType<typeof CoreServer.prototype.toObject>[];
            } = {};
            if (this.server_settings != null) {
                data.server_settings = this.server_settings.toObject();
            }
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            if (this.matches != null) {
                data.matches = this.matches.map((item: Match) => item.toObject());
            }
            if (this.events != null) {
                data.events = this.events.map((item: QualifierEvent) => item.toObject());
            }
            if (this.known_hosts != null) {
                data.known_hosts = this.known_hosts.map((item: CoreServer) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_server_settings)
                writer.writeMessage(1, this.server_settings, () => this.server_settings.serialize(writer));
            if (this.users.length)
                writer.writeRepeatedMessage(2, this.users, (item: User) => item.serialize(writer));
            if (this.matches.length)
                writer.writeRepeatedMessage(4, this.matches, (item: Match) => item.serialize(writer));
            if (this.events.length)
                writer.writeRepeatedMessage(5, this.events, (item: QualifierEvent) => item.serialize(writer));
            if (this.known_hosts.length)
                writer.writeRepeatedMessage(6, this.known_hosts, (item: CoreServer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): State {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new State();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.server_settings, () => message.server_settings = ServerSettings.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 2, User.deserialize(reader), User));
                        break;
                    case 4:
                        reader.readMessage(message.matches, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Match.deserialize(reader), Match));
                        break;
                    case 5:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 5, QualifierEvent.deserialize(reader), QualifierEvent));
                        break;
                    case 6:
                        reader.readMessage(message.known_hosts, () => pb_1.Message.addToRepeatedWrapperField(message, 6, CoreServer.deserialize(reader), CoreServer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): State {
            return State.deserialize(bytes);
        }
    }
    export class ModalOption extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            label?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            label?: string;
            value?: string;
        }): ModalOption {
            const message = new ModalOption({});
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                label?: string;
                value?: string;
            } = {};
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.label.length)
                writer.writeString(1, this.label);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModalOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModalOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.label = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModalOption {
            return ModalOption.deserialize(bytes);
        }
    }
    export class LeaderboardScore extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_id?: string;
            parameters?: GameplayParameters;
            user_id?: string;
            username?: string;
            score?: number;
            full_combo?: boolean;
            color?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
                if ("full_combo" in data && data.full_combo != undefined) {
                    this.full_combo = data.full_combo;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get parameters() {
            return pb_1.Message.getWrapperField(this, GameplayParameters, 2) as GameplayParameters;
        }
        set parameters(value: GameplayParameters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_parameters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get full_combo() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set full_combo(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set color(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            event_id?: string;
            parameters?: ReturnType<typeof GameplayParameters.prototype.toObject>;
            user_id?: string;
            username?: string;
            score?: number;
            full_combo?: boolean;
            color?: string;
        }): LeaderboardScore {
            const message = new LeaderboardScore({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.parameters != null) {
                message.parameters = GameplayParameters.fromObject(data.parameters);
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.score != null) {
                message.score = data.score;
            }
            if (data.full_combo != null) {
                message.full_combo = data.full_combo;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: string;
                parameters?: ReturnType<typeof GameplayParameters.prototype.toObject>;
                user_id?: string;
                username?: string;
                score?: number;
                full_combo?: boolean;
                color?: string;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.parameters != null) {
                data.parameters = this.parameters.toObject();
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            if (this.full_combo != null) {
                data.full_combo = this.full_combo;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_id.length)
                writer.writeString(1, this.event_id);
            if (this.has_parameters)
                writer.writeMessage(2, this.parameters, () => this.parameters.serialize(writer));
            if (this.user_id.length)
                writer.writeString(3, this.user_id);
            if (this.username.length)
                writer.writeString(4, this.username);
            if (this.score != 0)
                writer.writeInt32(5, this.score);
            if (this.full_combo != false)
                writer.writeBool(6, this.full_combo);
            if (this.color.length)
                writer.writeString(7, this.color);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaderboardScore {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaderboardScore();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.parameters, () => message.parameters = GameplayParameters.deserialize(reader));
                        break;
                    case 3:
                        message.user_id = reader.readString();
                        break;
                    case 4:
                        message.username = reader.readString();
                        break;
                    case 5:
                        message.score = reader.readInt32();
                        break;
                    case 6:
                        message.full_combo = reader.readBool();
                        break;
                    case 7:
                        message.color = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaderboardScore {
            return LeaderboardScore.deserialize(bytes);
        }
    }
    export class RealtimeScore extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_guid?: string;
            score?: number;
            score_with_modifiers?: number;
            max_score?: number;
            max_score_with_modifiers?: number;
            combo?: number;
            player_health?: number;
            accuracy?: number;
            song_position?: number;
            notesMissed?: number;
            badCuts?: number;
            bombHits?: number;
            wallHits?: number;
            maxCombo?: number;
            leftHand?: ScoreTrackerHand;
            rightHand?: ScoreTrackerHand;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_guid" in data && data.user_guid != undefined) {
                    this.user_guid = data.user_guid;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
                if ("score_with_modifiers" in data && data.score_with_modifiers != undefined) {
                    this.score_with_modifiers = data.score_with_modifiers;
                }
                if ("max_score" in data && data.max_score != undefined) {
                    this.max_score = data.max_score;
                }
                if ("max_score_with_modifiers" in data && data.max_score_with_modifiers != undefined) {
                    this.max_score_with_modifiers = data.max_score_with_modifiers;
                }
                if ("combo" in data && data.combo != undefined) {
                    this.combo = data.combo;
                }
                if ("player_health" in data && data.player_health != undefined) {
                    this.player_health = data.player_health;
                }
                if ("accuracy" in data && data.accuracy != undefined) {
                    this.accuracy = data.accuracy;
                }
                if ("song_position" in data && data.song_position != undefined) {
                    this.song_position = data.song_position;
                }
                if ("notesMissed" in data && data.notesMissed != undefined) {
                    this.notesMissed = data.notesMissed;
                }
                if ("badCuts" in data && data.badCuts != undefined) {
                    this.badCuts = data.badCuts;
                }
                if ("bombHits" in data && data.bombHits != undefined) {
                    this.bombHits = data.bombHits;
                }
                if ("wallHits" in data && data.wallHits != undefined) {
                    this.wallHits = data.wallHits;
                }
                if ("maxCombo" in data && data.maxCombo != undefined) {
                    this.maxCombo = data.maxCombo;
                }
                if ("leftHand" in data && data.leftHand != undefined) {
                    this.leftHand = data.leftHand;
                }
                if ("rightHand" in data && data.rightHand != undefined) {
                    this.rightHand = data.rightHand;
                }
            }
        }
        get user_guid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_guid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get score_with_modifiers() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set score_with_modifiers(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_score() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_score(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_score_with_modifiers() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_score_with_modifiers(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get combo() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set combo(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get player_health() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set player_health(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get accuracy() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set accuracy(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get song_position() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set song_position(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get notesMissed() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set notesMissed(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get badCuts() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set badCuts(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get bombHits() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set bombHits(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get wallHits() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set wallHits(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get maxCombo() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set maxCombo(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get leftHand() {
            return pb_1.Message.getWrapperField(this, ScoreTrackerHand, 15) as ScoreTrackerHand;
        }
        set leftHand(value: ScoreTrackerHand) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_leftHand() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get rightHand() {
            return pb_1.Message.getWrapperField(this, ScoreTrackerHand, 16) as ScoreTrackerHand;
        }
        set rightHand(value: ScoreTrackerHand) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_rightHand() {
            return pb_1.Message.getField(this, 16) != null;
        }
        static fromObject(data: {
            user_guid?: string;
            score?: number;
            score_with_modifiers?: number;
            max_score?: number;
            max_score_with_modifiers?: number;
            combo?: number;
            player_health?: number;
            accuracy?: number;
            song_position?: number;
            notesMissed?: number;
            badCuts?: number;
            bombHits?: number;
            wallHits?: number;
            maxCombo?: number;
            leftHand?: ReturnType<typeof ScoreTrackerHand.prototype.toObject>;
            rightHand?: ReturnType<typeof ScoreTrackerHand.prototype.toObject>;
        }): RealtimeScore {
            const message = new RealtimeScore({});
            if (data.user_guid != null) {
                message.user_guid = data.user_guid;
            }
            if (data.score != null) {
                message.score = data.score;
            }
            if (data.score_with_modifiers != null) {
                message.score_with_modifiers = data.score_with_modifiers;
            }
            if (data.max_score != null) {
                message.max_score = data.max_score;
            }
            if (data.max_score_with_modifiers != null) {
                message.max_score_with_modifiers = data.max_score_with_modifiers;
            }
            if (data.combo != null) {
                message.combo = data.combo;
            }
            if (data.player_health != null) {
                message.player_health = data.player_health;
            }
            if (data.accuracy != null) {
                message.accuracy = data.accuracy;
            }
            if (data.song_position != null) {
                message.song_position = data.song_position;
            }
            if (data.notesMissed != null) {
                message.notesMissed = data.notesMissed;
            }
            if (data.badCuts != null) {
                message.badCuts = data.badCuts;
            }
            if (data.bombHits != null) {
                message.bombHits = data.bombHits;
            }
            if (data.wallHits != null) {
                message.wallHits = data.wallHits;
            }
            if (data.maxCombo != null) {
                message.maxCombo = data.maxCombo;
            }
            if (data.leftHand != null) {
                message.leftHand = ScoreTrackerHand.fromObject(data.leftHand);
            }
            if (data.rightHand != null) {
                message.rightHand = ScoreTrackerHand.fromObject(data.rightHand);
            }
            return message;
        }
        toObject() {
            const data: {
                user_guid?: string;
                score?: number;
                score_with_modifiers?: number;
                max_score?: number;
                max_score_with_modifiers?: number;
                combo?: number;
                player_health?: number;
                accuracy?: number;
                song_position?: number;
                notesMissed?: number;
                badCuts?: number;
                bombHits?: number;
                wallHits?: number;
                maxCombo?: number;
                leftHand?: ReturnType<typeof ScoreTrackerHand.prototype.toObject>;
                rightHand?: ReturnType<typeof ScoreTrackerHand.prototype.toObject>;
            } = {};
            if (this.user_guid != null) {
                data.user_guid = this.user_guid;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            if (this.score_with_modifiers != null) {
                data.score_with_modifiers = this.score_with_modifiers;
            }
            if (this.max_score != null) {
                data.max_score = this.max_score;
            }
            if (this.max_score_with_modifiers != null) {
                data.max_score_with_modifiers = this.max_score_with_modifiers;
            }
            if (this.combo != null) {
                data.combo = this.combo;
            }
            if (this.player_health != null) {
                data.player_health = this.player_health;
            }
            if (this.accuracy != null) {
                data.accuracy = this.accuracy;
            }
            if (this.song_position != null) {
                data.song_position = this.song_position;
            }
            if (this.notesMissed != null) {
                data.notesMissed = this.notesMissed;
            }
            if (this.badCuts != null) {
                data.badCuts = this.badCuts;
            }
            if (this.bombHits != null) {
                data.bombHits = this.bombHits;
            }
            if (this.wallHits != null) {
                data.wallHits = this.wallHits;
            }
            if (this.maxCombo != null) {
                data.maxCombo = this.maxCombo;
            }
            if (this.leftHand != null) {
                data.leftHand = this.leftHand.toObject();
            }
            if (this.rightHand != null) {
                data.rightHand = this.rightHand.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_guid.length)
                writer.writeString(1, this.user_guid);
            if (this.score != 0)
                writer.writeInt32(2, this.score);
            if (this.score_with_modifiers != 0)
                writer.writeInt32(3, this.score_with_modifiers);
            if (this.max_score != 0)
                writer.writeInt32(4, this.max_score);
            if (this.max_score_with_modifiers != 0)
                writer.writeInt32(5, this.max_score_with_modifiers);
            if (this.combo != 0)
                writer.writeInt32(6, this.combo);
            if (this.player_health != 0)
                writer.writeFloat(7, this.player_health);
            if (this.accuracy != 0)
                writer.writeFloat(8, this.accuracy);
            if (this.song_position != 0)
                writer.writeFloat(9, this.song_position);
            if (this.notesMissed != 0)
                writer.writeInt32(10, this.notesMissed);
            if (this.badCuts != 0)
                writer.writeInt32(11, this.badCuts);
            if (this.bombHits != 0)
                writer.writeInt32(12, this.bombHits);
            if (this.wallHits != 0)
                writer.writeInt32(13, this.wallHits);
            if (this.maxCombo != 0)
                writer.writeInt32(14, this.maxCombo);
            if (this.has_leftHand)
                writer.writeMessage(15, this.leftHand, () => this.leftHand.serialize(writer));
            if (this.has_rightHand)
                writer.writeMessage(16, this.rightHand, () => this.rightHand.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RealtimeScore {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RealtimeScore();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_guid = reader.readString();
                        break;
                    case 2:
                        message.score = reader.readInt32();
                        break;
                    case 3:
                        message.score_with_modifiers = reader.readInt32();
                        break;
                    case 4:
                        message.max_score = reader.readInt32();
                        break;
                    case 5:
                        message.max_score_with_modifiers = reader.readInt32();
                        break;
                    case 6:
                        message.combo = reader.readInt32();
                        break;
                    case 7:
                        message.player_health = reader.readFloat();
                        break;
                    case 8:
                        message.accuracy = reader.readFloat();
                        break;
                    case 9:
                        message.song_position = reader.readFloat();
                        break;
                    case 10:
                        message.notesMissed = reader.readInt32();
                        break;
                    case 11:
                        message.badCuts = reader.readInt32();
                        break;
                    case 12:
                        message.bombHits = reader.readInt32();
                        break;
                    case 13:
                        message.wallHits = reader.readInt32();
                        break;
                    case 14:
                        message.maxCombo = reader.readInt32();
                        break;
                    case 15:
                        reader.readMessage(message.leftHand, () => message.leftHand = ScoreTrackerHand.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.rightHand, () => message.rightHand = ScoreTrackerHand.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RealtimeScore {
            return RealtimeScore.deserialize(bytes);
        }
    }
    export class ScoreTrackerHand extends pb_1.Message {
        private one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hit?: number;
            miss?: number;
            badCut?: number;
            avgCut?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hit" in data && data.hit != undefined) {
                    this.hit = data.hit;
                }
                if ("miss" in data && data.miss != undefined) {
                    this.miss = data.miss;
                }
                if ("badCut" in data && data.badCut != undefined) {
                    this.badCut = data.badCut;
                }
                if ("avgCut" in data && data.avgCut != undefined) {
                    this.avgCut = data.avgCut;
                }
            }
        }
        get hit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set hit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get miss() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set miss(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get badCut() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set badCut(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get avgCut() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set avgCut(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            hit?: number;
            miss?: number;
            badCut?: number;
            avgCut?: number[];
        }): ScoreTrackerHand {
            const message = new ScoreTrackerHand({});
            if (data.hit != null) {
                message.hit = data.hit;
            }
            if (data.miss != null) {
                message.miss = data.miss;
            }
            if (data.badCut != null) {
                message.badCut = data.badCut;
            }
            if (data.avgCut != null) {
                message.avgCut = data.avgCut;
            }
            return message;
        }
        toObject() {
            const data: {
                hit?: number;
                miss?: number;
                badCut?: number;
                avgCut?: number[];
            } = {};
            if (this.hit != null) {
                data.hit = this.hit;
            }
            if (this.miss != null) {
                data.miss = this.miss;
            }
            if (this.badCut != null) {
                data.badCut = this.badCut;
            }
            if (this.avgCut != null) {
                data.avgCut = this.avgCut;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hit != 0)
                writer.writeInt32(1, this.hit);
            if (this.miss != 0)
                writer.writeInt32(2, this.miss);
            if (this.badCut != 0)
                writer.writeInt32(3, this.badCut);
            if (this.avgCut.length)
                writer.writePackedFloat(4, this.avgCut);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScoreTrackerHand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScoreTrackerHand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hit = reader.readInt32();
                        break;
                    case 2:
                        message.miss = reader.readInt32();
                        break;
                    case 3:
                        message.badCut = reader.readInt32();
                        break;
                    case 4:
                        message.avgCut = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScoreTrackerHand {
            return ScoreTrackerHand.deserialize(bytes);
        }
    }
}
